
package puzzle;

import java.lang.reflect.*;
import java.util.HashMap; 
import java.util.Map; 


public class Puzzle {
    
    static int p =24;
    private static int[] arrayNums;
    static boolean b = false;
    static String formula;
                    
    public void setNums() {
        int[] n = new int[4];
        n[0]= 4;
        n[1]= 1;
        n[2]= 8;
        n[3]= 7;
        arrayNums = n;
    }
            
    public static void main(String[] args) {
        Puzzle s = new Puzzle();
        s.setNums();
        s.canBeEqualTo24(arrayNums);
        
        if (b==true){
            System.out.println(b + " " + formula + "="+p);
        } else {
            System.out.println(b + " из данного набора чисел невозможно составить выражение, равное  " + p);
        }
                
    }
    
    public boolean canBeEqualTo24(int[] nums) {
        
        try {
            float[] r = new float[4];
            r[0] = (float) nums[0]; 
            r[1] = (float) nums[1];
            r[2] = (float) nums[2];
            r[3] = (float) nums[3];
            Sequence seq = new Sequence();       
            Method[] m = Sequence.class.getMethods();
            for (Method m1 : m) {
               
                float[] result = (float[]) m1.invoke(seq, r); //for_sequence
                this.all(result);                             //for_combination +,-,*,/,(,);  
                  
            }    
        } catch (IllegalAccessException | InvocationTargetException | IllegalArgumentException ex){
            //System.out.println("catch");    
        }finally{
            //System.out.println("finally");
        }
        return b;
    }
 
    public void all (float[]a){
        
        Map<Integer, String> hashMap = new HashMap<>();
        
        
        
        // a-combination a[0]_a[1]_a[2]_a[3] 64
        hashMap.put(Math.round(a[0]+a[1]+a[2]+a[3]), String.format("%.0f+%.0f+%.0f+%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+a[1]+a[2]-a[3]), String.format("%.0f+%.0f+%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+a[1]+a[2]*a[3]), String.format("%.0f+%.0f+%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]+a[2]/a[3]), String.format("%.0f+%.0f+%.0f/%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]-a[2]+a[3]), String.format("%.0f+%.0f-%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]-a[2]-a[3]), String.format("%.0f+%.0f-%.0f-%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]-a[2]*a[3]), String.format("%.0f+%.0f-%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]-a[2]/a[3]), String.format("%.0f+%.0f-%.0f/%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]*a[2]+a[3]), String.format("%.0f+%.0f*%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]*a[2]-a[3]), String.format("%.0f+%.0f*%.0f-%.0f", a[0],a[1],a[2],a[3]));  
        hashMap.put(Math.round(a[0]+a[1]*a[2]*a[3]), String.format("%.0f+%.0f*%.0f*%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+a[1]*a[2]/a[3]), String.format("%.0f+%.0f*%.0f/%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+a[1]/a[2]+a[3]), String.format("%.0f+%.0f/%.0f+%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+a[1]/a[2]-a[3]), String.format("%.0f+%.0f/%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+a[1]/a[2]*a[3]), String.format("%.0f+%.0f/%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]/a[2]/a[3]), String.format("%.0f+%.0f/%.0f/%.0f", a[0],a[1],a[2],a[3]));
        
        hashMap.put(Math.round(a[0]-a[1]+a[2]+a[3]), String.format("%.0f-%.0f+%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]+a[2]-a[3]), String.format("%.0f-%.0f+%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-a[1]+a[2]*a[3]), String.format("%.0f-%.0f+%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]+a[2]/a[3]), String.format("%.0f-%.0f+%.0f/%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]-a[2]+a[3]), String.format("%.0f-%.0f-%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]-a[2]-a[3]), String.format("%.0f-%.0f-%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-a[1]-a[2]*a[3]), String.format("%.0f-%.0f-%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]-a[2]/a[3]), String.format("%.0f-%.0f-%.0f/%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]*a[2]+a[3]), String.format("%.0f-%.0f*%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]*a[2]-a[3]), String.format("%.0f-%.0f*%.0f-%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]*a[2]*a[3]), String.format("%.0f-%.0f*%.0f*%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-a[1]*a[2]/a[3]), String.format("%.0f-%.0f*%.0f/%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]/a[2]+a[3]), String.format("%.0f-%.0f/%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]/a[2]-a[3]), String.format("%.0f-%.0f/%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-a[1]/a[2]*a[3]), String.format("%.0f-%.0f/%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]/a[2]/a[3]), String.format("%.0f-%.0f/%.0f/%.0f", a[0],a[1],a[2],a[3])); 
        
        hashMap.put(Math.round(a[0]*a[1]+a[2]+a[3]), String.format("%.0f*%.0f+%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]+a[2]-a[3]), String.format("%.0f*%.0f+%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*a[1]+a[2]*a[3]), String.format("%.0f*%.0f+%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]+a[2]/a[3]), String.format("%.0f*%.0f+%.0f/%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]-a[2]+a[3]), String.format("%.0f*%.0f-%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]-a[2]-a[3]), String.format("%.0f*%.0f-%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*a[1]-a[2]*a[3]), String.format("%.0f*%.0f-%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]-a[2]/a[3]), String.format("%.0f*%.0f-%.0f/%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]*a[2]+a[3]), String.format("%.0f*%.0f*%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]*a[2]-a[3]), String.format("%.0f*%.0f*%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*a[1]*a[2]*a[3]), String.format("%.0f*%.0f*%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]*a[2]/a[3]), String.format("%.0f*%.0f*%.0f/%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]/a[2]+a[3]), String.format("%.0f*%.0f/%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]/a[2]-a[3]), String.format("%.0f*%.0f/%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*a[1]/a[2]*a[3]), String.format("%.0f*%.0f/%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]/a[2]/a[3]), String.format("%.0f*%.0f/%.0f/%.0f", a[0],a[1],a[2],a[3]));
        
        hashMap.put(Math.round(a[0]/a[1]+a[2]+a[3]), String.format("%.0f/%.0f+%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]+a[2]-a[3]), String.format("%.0f/%.0f+%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/a[1]+a[2]*a[3]), String.format("%.0f/%.0f+%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]+a[2]/a[3]), String.format("%.0f/%.0f+%.0f/%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]-a[2]+a[3]), String.format("%.0f/%.0f-%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]-a[2]-a[3]), String.format("%.0f/%.0f-%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/a[1]-a[2]*a[3]), String.format("%.0f/%.0f-%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]-a[2]/a[3]), String.format("%.0f/%.0f-%.0f/%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]*a[2]+a[3]), String.format("%.0f/%.0f*%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]*a[2]-a[3]), String.format("%.0f/%.0f*%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/a[1]*a[2]*a[3]), String.format("%.0f/%.0f*%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]*a[2]/a[3]), String.format("%.0f/%.0f*%.0f/%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]/a[2]+a[3]), String.format("%.0f/%.0f/%.0f+%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]/a[2]-a[3]), String.format("%.0f/%.0f/%.0f-%.0f", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/a[1]/a[2]*a[3]), String.format("%.0f/%.0f/%.0f*%.0f", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]/a[2]/a[3]), String.format("%.0f/%.0f/%.0f/%.0f", a[0],a[1],a[2],a[3]));
    
    
    // combination a[0]_a[1]_(a[2]_a[3])
        hashMap.put(Math.round(a[0]+a[1]+(a[2]+a[3])), String.format("%.0f+%.0f+(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]+(a[2]-a[3])), String.format("%.0f+%.0f+(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+a[1]+(a[2]*a[3])), String.format("%.0f+%.0f+(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]+(a[2]/a[3])), String.format("%.0f+%.0f+(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]-(a[2]+a[3])), String.format("%.0f+%.0f-(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]-(a[2]-a[3])), String.format("%.0f+%.0f-(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+a[1]-(a[2]*a[3])), String.format("%.0f+%.0f-(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]-(a[2]/a[3])), String.format("%.0f+%.0f-(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]*(a[2]+a[3])), String.format("%.0f+%.0f*(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]*(a[2]-a[3])), String.format("%.0f+%.0f*(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+a[1]*(a[2]*a[3])), String.format("%.0f+%.0f*(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]*(a[2]/a[3])), String.format("%.0f+%.0f*(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]/(a[2]+a[3])), String.format("%.0f+%.0f/(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]/(a[2]-a[3])), String.format("%.0f+%.0f/(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+a[1]/(a[2]*a[3])), String.format("%.0f+%.0f/(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+a[1]/(a[2]/a[3])), String.format("%.0f+%.0f/(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
    
        hashMap.put(Math.round(a[0]-a[1]+(a[2]+a[3])), String.format("%.0f-%.0f+(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]+(a[2]-a[3])), String.format("%.0f-%.0f+(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-a[1]+(a[2]*a[3])), String.format("%.0f-%.0f+(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]+(a[2]/a[3])), String.format("%.0f-%.0f+(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]-(a[2]+a[3])), String.format("%.0f-%.0f-(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]-(a[2]-a[3])), String.format("%.0f-%.0f-(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-a[1]-(a[2]*a[3])), String.format("%.0f-%.0f-(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]-(a[2]/a[3])), String.format("%.0f-%.0f-(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]*(a[2]+a[3])), String.format("%.0f-%.0f*(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]*(a[2]-a[3])), String.format("%.0f-%.0f*(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-a[1]*(a[2]*a[3])), String.format("%.0f-%.0f*(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]*(a[2]/a[3])), String.format("%.0f-%.0f*(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]/(a[2]+a[3])), String.format("%.0f-%.0f/(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]/(a[2]-a[3])), String.format("%.0f-%.0f/(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-a[1]/(a[2]*a[3])), String.format("%.0f-%.0f/(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-a[1]/(a[2]/a[3])), String.format("%.0f-%.0f/(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
    
        hashMap.put(Math.round(a[0]*a[1]+(a[2]+a[3])), String.format("%.0f*%.0f+(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]+(a[2]-a[3])), String.format("%.0f*%.0f+(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*a[1]+(a[2]*a[3])), String.format("%.0f*%.0f+(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]+(a[2]/a[3])), String.format("%.0f*%.0f+(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]-(a[2]+a[3])), String.format("%.0f*%.0f-(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]-(a[2]-a[3])), String.format("%.0f*%.0f-(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*a[1]-(a[2]*a[3])), String.format("%.0f*%.0f-(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]-(a[2]/a[3])), String.format("%.0f*%.0f-(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]*(a[2]+a[3])), String.format("%.0f*%.0f*(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]*(a[2]-a[3])), String.format("%.0f*%.0f*(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*a[1]*(a[2]*a[3])), String.format("%.0f*%.0f*(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]*(a[2]/a[3])), String.format("%.0f*%.0f*(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]/(a[2]+a[3])), String.format("%.0f*%.0f/(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]/(a[2]-a[3])), String.format("%.0f*%.0f/(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*a[1]/(a[2]*a[3])), String.format("%.0f*%.0f/(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*a[1]/(a[2]/a[3])), String.format("%.0f*%.0f/(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
    
        hashMap.put(Math.round(a[0]/a[1]+(a[2]+a[3])), String.format("%.0f/%.0f+(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]+(a[2]-a[3])), String.format("%.0f/%.0f+(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/a[1]+(a[2]*a[3])), String.format("%.0f/%.0f+(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]+(a[2]/a[3])), String.format("%.0f/%.0f+(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]-(a[2]+a[3])), String.format("%.0f/%.0f-(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]-(a[2]-a[3])), String.format("%.0f/%.0f-(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/a[1]-(a[2]*a[3])), String.format("%.0f/%.0f-(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]-(a[2]/a[3])), String.format("%.0f/%.0f-(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]*(a[2]+a[3])), String.format("%.0f/%.0f*(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]*(a[2]-a[3])), String.format("%.0f/%.0f*(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/a[1]*(a[2]*a[3])), String.format("%.0f/%.0f*(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]*(a[2]/a[3])), String.format("%.0f/%.0f*(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]/(a[2]+a[3])), String.format("%.0f/%.0f/(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]/(a[2]-a[3])), String.format("%.0f/%.0f/(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/a[1]/(a[2]*a[3])), String.format("%.0f/%.0f/(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/a[1]/(a[2]/a[3])), String.format("%.0f/%.0f/(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
    
    
    // combination (a[0]_a[1])_(a[2]_a[3])
        hashMap.put(Math.round((a[0]+a[1])+(a[2]+a[3])), String.format("(%.0f+%.0f)+(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]+a[1])+(a[2]-a[3])), String.format("(%.0f+%.0f)+(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]+a[1])+(a[2]*a[3])), String.format("(%.0f+%.0f)+(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]+a[1])+(a[2]/a[3])), String.format("(%.0f+%.0f)+(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]+a[1])-(a[2]+a[3])), String.format("(%.0f+%.0f)-(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]+a[1])-(a[2]-a[3])), String.format("(%.0f+%.0f)-(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]+a[1])-(a[2]*a[3])), String.format("(%.0f+%.0f)-(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]+a[1])-(a[2]/a[3])), String.format("(%.0f+%.0f)-(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]+a[1])*(a[2]+a[3])), String.format("(%.0f+%.0f)*(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]+a[1])*(a[2]-a[3])), String.format("(%.0f+%.0f)*(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]+a[1])*(a[2]*a[3])), String.format("(%.0f+%.0f)*(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]+a[1])*(a[2]/a[3])), String.format("(%.0f+%.0f)*(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]+a[1])/(a[2]+a[3])), String.format("(%.0f+%.0f)/(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]+a[1])/(a[2]-a[3])), String.format("(%.0f+%.0f)/(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]+a[1])/(a[2]*a[3])), String.format("(%.0f+%.0f)/(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]+a[1])/(a[2]/a[3])), String.format("(%.0f+%.0f)/(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
    
        hashMap.put(Math.round((a[0]-a[1])+(a[2]+a[3])), String.format("(%.0f-%.0f)+(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]-a[1])+(a[2]-a[3])), String.format("(%.0f-%.0f)+(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]-a[1])+(a[2]*a[3])), String.format("(%.0f-%.0f)+(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]-a[1])+(a[2]/a[3])), String.format("(%.0f-%.0f)+(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]-a[1])-(a[2]+a[3])), String.format("(%.0f-%.0f)-(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]-a[1])-(a[2]-a[3])), String.format("(%.0f-%.0f)-(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]-a[1])-(a[2]*a[3])), String.format("(%.0f-%.0f)-(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]-a[1])-(a[2]/a[3])), String.format("(%.0f-%.0f)-(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]-a[1])*(a[2]+a[3])), String.format("(%.0f-%.0f)*(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]-a[1])*(a[2]-a[3])), String.format("(%.0f-%.0f)*(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]-a[1])*(a[2]*a[3])), String.format("(%.0f-%.0f)*(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]-a[1])*(a[2]/a[3])), String.format("(%.0f-%.0f)*(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]-a[1])/(a[2]+a[3])), String.format("(%.0f-%.0f)/(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]-a[1])/(a[2]-a[3])), String.format("(%.0f-%.0f)/(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]-a[1])/(a[2]*a[3])), String.format("(%.0f-%.0f)/(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]-a[1])/(a[2]/a[3])), String.format("(%.0f-%.0f)/(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
    
        hashMap.put(Math.round((a[0]*a[1])+(a[2]+a[3])), String.format("(%.0f*%.0f)+(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]*a[1])+(a[2]-a[3])), String.format("(%.0f*%.0f)+(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]*a[1])+(a[2]*a[3])), String.format("(%.0f*%.0f)+(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]*a[1])+(a[2]/a[3])), String.format("(%.0f*%.0f)+(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]*a[1])-(a[2]+a[3])), String.format("(%.0f*%.0f)-(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]*a[1])-(a[2]-a[3])), String.format("(%.0f*%.0f)-(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]*a[1])-(a[2]*a[3])), String.format("(%.0f*%.0f)-(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]*a[1])-(a[2]/a[3])), String.format("(%.0f*%.0f)-(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]*a[1])*(a[2]+a[3])), String.format("(%.0f*%.0f)*(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]*a[1])*(a[2]-a[3])), String.format("(%.0f*%.0f)*(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]*a[1])*(a[2]*a[3])), String.format("(%.0f*%.0f)*(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]*a[1])*(a[2]/a[3])), String.format("(%.0f*%.0f)*(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]*a[1])/(a[2]+a[3])), String.format("(%.0f*%.0f)/(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]*a[1])/(a[2]-a[3])), String.format("(%.0f*%.0f)/(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]*a[1])/(a[2]*a[3])), String.format("(%.0f*%.0f)/(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]*a[1])/(a[2]/a[3])), String.format("(%.0f*%.0f)/(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
    
        hashMap.put(Math.round((a[0]/a[1])+(a[2]+a[3])), String.format("(%.0f/%.0f)+(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]/a[1])+(a[2]-a[3])), String.format("(%.0f/%.0f)+(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]/a[1])+(a[2]*a[3])), String.format("(%.0f/%.0f)+(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]/a[1])+(a[2]/a[3])), String.format("(%.0f/%.0f)+(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]/a[1])-(a[2]+a[3])), String.format("(%.0f/%.0f)-(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]/a[1])-(a[2]-a[3])), String.format("(%.0f/%.0f)-(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]/a[1])-(a[2]*a[3])), String.format("(%.0f/%.0f)-(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]/a[1])-(a[2]/a[3])), String.format("(%.0f/%.0f)-(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]/a[1])*(a[2]+a[3])), String.format("(%.0f/%.0f)*(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]/a[1])*(a[2]-a[3])), String.format("(%.0f/%.0f)*(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]/a[1])*(a[2]*a[3])), String.format("(%.0f/%.0f)*(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]/a[1])*(a[2]/a[3])), String.format("(%.0f/%.0f)*(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]/a[1])/(a[2]+a[3])), String.format("(%.0f/%.0f)/(%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]/a[1])/(a[2]-a[3])), String.format("(%.0f/%.0f)/(%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round((a[0]/a[1])/(a[2]*a[3])), String.format("(%.0f/%.0f)/(%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round((a[0]/a[1])/(a[2]/a[3])), String.format("(%.0f/%.0f)/(%.0f/%.0f)", a[0],a[1],a[2],a[3]));
    
    
    // combination a[0]_(a[1]_a[2]_a[3])
        hashMap.put(Math.round(a[0]+(a[1]+a[2]+a[3])), String.format("%.0f+(%.0f+%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]+a[2]-a[3])), String.format("%.0f+(%.0f+%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+(a[1]+a[2]*a[3])), String.format("%.0f+(%.0f+%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]+a[2]/a[3])), String.format("%.0f+(%.0f+%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]-a[2]+a[3])), String.format("%.0f+(%.0f-%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]-a[2]-a[3])), String.format("%.0f+(%.0f-%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+(a[1]-a[2]*a[3])), String.format("%.0f+(%.0f-%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]-a[2]/a[3])), String.format("%.0f+(%.0f-%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]*a[2]+a[3])), String.format("%.0f+(%.0f*%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]*a[2]-a[3])), String.format("%.0f+(%.0f*%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+(a[1]*a[2]*a[3])), String.format("%.0f+(%.0f*%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]*a[2]/a[3])), String.format("%.0f+(%.0f*%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]/a[2]+a[3])), String.format("%.0f+(%.0f/%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]/a[2]-a[3])), String.format("%.0f+(%.0f/%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+(a[1]/a[2]*a[3])), String.format("%.0f+(%.0f/%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]/a[2]/a[3])), String.format("%.0f+(%.0f/%.0f/%.0f)", a[0],a[1],a[2],a[3]));
   
        hashMap.put(Math.round(a[0]-(a[1]+a[2]+a[3])), String.format("%.0f-(%.0f+%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]+a[2]-a[3])), String.format("%.0f-(%.0f+%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-(a[1]+a[2]*a[3])), String.format("%.0f-(%.0f+%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]+a[2]/a[3])), String.format("%.0f-(%.0f+%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]-a[2]+a[3])), String.format("%.0f-(%.0f-%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]-a[2]-a[3])), String.format("%.0f-(%.0f-%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-(a[1]-a[2]*a[3])), String.format("%.0f-(%.0f-%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]-a[2]/a[3])), String.format("%.0f-(%.0f-%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]*a[2]+a[3])), String.format("%.0f-(%.0f*%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]*a[2]-a[3])), String.format("%.0f-(%.0f*%.0f-%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]*a[2]*a[3])), String.format("%.0f-(%.0f*%.0f*%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-(a[1]*a[2]/a[3])), String.format("%.0f-(%.0f*%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]/a[2]+a[3])), String.format("%.0f-(%.0f/%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]/a[2]-a[3])), String.format("%.0f-(%.0f/%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-(a[1]/a[2]*a[3])), String.format("%.0f-(%.0f/%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]/a[2]/a[3])), String.format("%.0f-(%.0f/%.0f/%.0f)", a[0],a[1],a[2],a[3])); 
   
        hashMap.put(Math.round(a[0]*(a[1]+a[2]+a[3])), String.format("%.0f*(%.0f+%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]+a[2]-a[3])), String.format("%.0f*(%.0f+%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*(a[1]+a[2]*a[3])), String.format("%.0f*(%.0f+%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]+a[2]/a[3])), String.format("%.0f*(%.0f+%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]-a[2]+a[3])), String.format("%.0f*(%.0f-%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]-a[2]-a[3])), String.format("%.0f*(%.0f-%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*(a[1]-a[2]*a[3])), String.format("%.0f*(%.0f-%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]-a[2]/a[3])), String.format("%.0f*(%.0f-%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]*a[2]+a[3])), String.format("%.0f*(%.0f*%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]*a[2]-a[3])), String.format("%.0f*(%.0f*%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*(a[1]*a[2]*a[3])), String.format("%.0f*(%.0f*%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]*a[2]/a[3])), String.format("%.0f*(%.0f*%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]/a[2]+a[3])), String.format("%.0f*(%.0f/%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]/a[2]-a[3])), String.format("%.0f*(%.0f/%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*(a[1]/a[2]*a[3])), String.format("%.0f*(%.0f/%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]/a[2]/a[3])), String.format("%.0f*(%.0f/%.0f/%.0f)", a[0],a[1],a[2],a[3]));
    
        hashMap.put(Math.round(a[0]/(a[1]+a[2]+a[3])), String.format("%.0f/(%.0f+%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]+a[2]-a[3])), String.format("%.0f/(%.0f+%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/(a[1]+a[2]*a[3])), String.format("%.0f/(%.0f+%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]+a[2]/a[3])), String.format("%.0f/(%.0f+%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]-a[2]+a[3])), String.format("%.0f/(%.0f-%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]-a[2]-a[3])), String.format("%.0f/(%.0f-%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/(a[1]-a[2]*a[3])), String.format("%.0f/(%.0f-%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]-a[2]/a[3])), String.format("%.0f/(%.0f-%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]*a[2]+a[3])), String.format("%.0f/(%.0f*%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]*a[2]-a[3])), String.format("%.0f/(%.0f*%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/(a[1]*a[2]*a[3])), String.format("%.0f/(%.0f*%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]*a[2]/a[3])), String.format("%.0f/(%.0f*%.0f/%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]/a[2]+a[3])), String.format("%.0f/(%.0f/%.0f+%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]/a[2]-a[3])), String.format("%.0f/(%.0f/%.0f-%.0f)", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/(a[1]/a[2]*a[3])), String.format("%.0f/(%.0f/%.0f*%.0f)", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]/a[2]/a[3])), String.format("%.0f/(%.0f/%.0f/%.0f)", a[0],a[1],a[2],a[3]));
    
    
    // combination a[0]_(a[1]_(a[2]_a[3]))
        hashMap.put(Math.round(a[0]+(a[1]+(a[2]+a[3]))), String.format("%.0f+(%.0f+(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]+(a[2]-a[3]))), String.format("%.0f+(%.0f+(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+(a[1]+(a[2]*a[3]))), String.format("%.0f+(%.0f+(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]+(a[2]/a[3]))), String.format("%.0f+(%.0f+(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]-(a[2]+a[3]))), String.format("%.0f+(%.0f-(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]-(a[2]-a[3]))), String.format("%.0f+(%.0f-(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+(a[1]-(a[2]*a[3]))), String.format("%.0f+(%.0f-(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]-(a[2]/a[3]))), String.format("%.0f+(%.0f-(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]*(a[2]+a[3]))), String.format("%.0f+(%.0f*(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]*(a[2]-a[3]))), String.format("%.0f+(%.0f*(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+(a[1]*(a[2]*a[3]))), String.format("%.0f+(%.0f*(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]*(a[2]/a[3]))), String.format("%.0f+(%.0f*(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]/(a[2]+a[3]))), String.format("%.0f+(%.0f/(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]/(a[2]-a[3]))), String.format("%.0f+(%.0f/(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]+(a[1]/(a[2]*a[3]))), String.format("%.0f+(%.0f/(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]+(a[1]/(a[2]/a[3]))), String.format("%.0f+(%.0f/(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
   
        hashMap.put(Math.round(a[0]-(a[1]+(a[2]+a[3]))), String.format("%.0f-(%.0f+(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]+(a[2]-a[3]))), String.format("%.0f-(%.0f+(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-(a[1]+(a[2]*a[3]))), String.format("%.0f-(%.0f+(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]+(a[2]/a[3]))), String.format("%.0f-(%.0f+(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]-(a[2]+a[3]))), String.format("%.0f-(%.0f-(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]-(a[2]-a[3]))), String.format("%.0f-(%.0f-(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-(a[1]-(a[2]*a[3]))), String.format("%.0f-(%.0f-(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]-(a[2]/a[3]))), String.format("%.0f-(%.0f-(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]*(a[2]+a[3]))), String.format("%.0f-(%.0f*(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]*(a[2]-a[3]))), String.format("%.0f-(%.0f*(%.0f-%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]*(a[2]*a[3]))), String.format("%.0f-(%.0f*(%.0f*%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-(a[1]*(a[2]/a[3]))), String.format("%.0f-(%.0f*(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]/(a[2]+a[3]))), String.format("%.0f-(%.0f/(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]/(a[2]-a[3]))), String.format("%.0f-(%.0f/(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]-(a[1]/(a[2]*a[3]))), String.format("%.0f-(%.0f/(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]-(a[1]/(a[2]/a[3]))), String.format("%.0f-(%.0f/(%.0f/%.0f))", a[0],a[1],a[2],a[3])); 
   
        hashMap.put(Math.round(a[0]*(a[1]+(a[2]+a[3]))), String.format("%.0f*(%.0f+(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]+(a[2]-a[3]))), String.format("%.0f*(%.0f+(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*(a[1]+(a[2]*a[3]))), String.format("%.0f*(%.0f+(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]+(a[2]/a[3]))), String.format("%.0f*(%.0f+(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]-(a[2]+a[3]))), String.format("%.0f*(%.0f-(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]-(a[2]-a[3]))), String.format("%.0f*(%.0f-(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*(a[1]-(a[2]*a[3]))), String.format("%.0f*(%.0f-(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]-(a[2]/a[3]))), String.format("%.0f*(%.0f-(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]*(a[2]+a[3]))), String.format("%.0f*(%.0f*(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]*(a[2]-a[3]))), String.format("%.0f*(%.0f*(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*(a[1]*(a[2]*a[3]))), String.format("%.0f*(%.0f*(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]*(a[2]/a[3]))), String.format("%.0f*(%.0f*(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]/(a[2]+a[3]))), String.format("%.0f*(%.0f/(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]/(a[2]-a[3]))), String.format("%.0f*(%.0f/(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]*(a[1]/(a[2]*a[3]))), String.format("%.0f*(%.0f/(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]*(a[1]/(a[2]/a[3]))), String.format("%.0f*(%.0f/(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
    
        hashMap.put(Math.round(a[0]/(a[1]+(a[2]+a[3]))), String.format("%.0f/(%.0f+(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]+(a[2]-a[3]))), String.format("%.0f/(%.0f+(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/(a[1]+(a[2]*a[3]))), String.format("%.0f/(%.0f+(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]+(a[2]/a[3]))), String.format("%.0f/(%.0f+(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]-(a[2]+a[3]))), String.format("%.0f/(%.0f-(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]-(a[2]-a[3]))), String.format("%.0f/(%.0f-(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/(a[1]-(a[2]*a[3]))), String.format("%.0f/(%.0f-(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]-(a[2]/a[3]))), String.format("%.0f/(%.0f-(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]*(a[2]+a[3]))), String.format("%.0f/(%.0f*(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]*(a[2]-a[3]))), String.format("%.0f/(%.0f*(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/(a[1]*(a[2]*a[3]))), String.format("%.0f/(%.0f*(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]*(a[2]/a[3]))), String.format("%.0f/(%.0f*(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]/(a[2]+a[3]))), String.format("%.0f/(%.0f/(%.0f+%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]/(a[2]-a[3]))), String.format("%.0f/(%.0f/(%.0f-%.0f))", a[0],a[1],a[2],a[3])); 
        hashMap.put(Math.round(a[0]/(a[1]/(a[2]*a[3]))), String.format("%.0f/(%.0f/(%.0f*%.0f))", a[0],a[1],a[2],a[3]));
        hashMap.put(Math.round(a[0]/(a[1]/(a[2]/a[3]))), String.format("%.0f/(%.0f/(%.0f/%.0f))", a[0],a[1],a[2],a[3]));
        
        
        
        for (Integer key : hashMap.keySet()) {
            if (key==p) {
                formula = hashMap.get(key);
                b=true;
            }
        }
        
    } 
}
