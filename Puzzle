
package puzzle;

import java.lang.reflect.*;

public class Puzzle {
    
    final int p = 24;
    static int v;
    private static int[] arrayNums;
    static boolean b;
    static String met;
                
    public void setNums() {
        int[] n = new int[4];
        n[0]= 4;
        n[1]= 1;
        n[2]= 8;
        n[3]= 7;
        arrayNums = n;
    }
            
    public static void main(String[] args) 
            throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        Puzzle s = new Puzzle();
        s.setNums();
        s.canBeEqualTo24(arrayNums);
        System.out.println(b +" method_"+ met+ " combination_â„–"+v);
    }
    
    public boolean canBeEqualTo24(int[] nums) 
    throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        Puzzle s = new Puzzle();        
        Sequence seq = new Sequence();
                
        Method[] m = Sequence.class.getMethods();
               
        for (Method m1 : m) {
            int[] result1 = (int[]) m1.invoke(seq, nums);
            String MethodName = m1.getName();
            //System.out.println(MethodName);
            float[] r = new float[4];
            r[0] =  result1[0]; 
            r[1] =  result1[1];
            r[2] =  result1[2];
            r[3] =  result1[3];
            s.all(r);
            if (b==true){
                met = MethodName;
                break;
            }
        }
             
        return b;
      
    }
 
    public boolean all (float[]a){
        int j = 0;
        float[] cmb = new float [321]; 
        
        // a-combination x_a[1]_a[2]_a[3] 64
        cmb[j]= a[0]+a[1]+a[2]+a[3];   
        cmb[j++]= a[0]+a[1]+a[2]+a[3];
        cmb[j++]= a[0]+a[1]+a[2]-a[3]; 
        cmb[j++]= a[0]+a[1]+a[2]*a[3];
        cmb[j++]= a[0]+a[1]+a[2]/a[3];
        cmb[j++]= a[0]+a[1]-a[2]+a[3];
        cmb[j++]= a[0]+a[1]-a[2]-a[3]; 
        cmb[j++]= a[0]+a[1]-a[2]*a[3];
        cmb[j++]= a[0]+a[1]-a[2]/a[3];
        cmb[j++]= a[0]+a[1]*a[2]+a[3];
        cmb[j++]= a[0]+a[1]*a[2]-a[3]; 
        cmb[j++]= a[0]+a[1]*a[2]*a[3];
        cmb[j++]= a[0]+a[1]*a[2]/a[3];
        cmb[j++]= a[0]+a[1]/a[2]+a[3];
        cmb[j++]= a[0]+a[1]/a[2]-a[3]; 
        cmb[j++]= a[0]+a[1]/a[2]*a[3];
        cmb[j++]= a[0]+a[1]/a[2]/a[3];
        
        cmb[j++]= a[0]-a[1]+a[2]+a[3];
        cmb[j++]= a[0]-a[1]+a[2]-a[3]; 
        cmb[j++]= a[0]-a[1]+a[2]*a[3];
        cmb[j++]= a[0]-a[1]+a[2]/a[3];
        cmb[j++]= a[0]-a[1]-a[2]+a[3];
        cmb[j++]= a[0]-a[1]-a[2]-a[3]; 
        cmb[j++]= a[0]-a[1]-a[2]*a[3];
        cmb[j++]= a[0]-a[1]-a[2]/a[3];
        cmb[j++]= a[0]-a[1]*a[2]+a[3];
        cmb[j++]= a[0]-a[1]*a[2]-a[3];
        cmb[j++]= a[0]-a[1]*a[2]*a[3]; 
        cmb[j++]= a[0]-a[1]*a[2]/a[3];
        cmb[j++]= a[0]-a[1]/a[2]+a[3];
        cmb[j++]= a[0]-a[1]/a[2]-a[3]; 
        cmb[j++]= a[0]-a[1]/a[2]*a[3];
        cmb[j++]= a[0]-a[1]/a[2]/a[3]; 
        
        cmb[j++]= a[0]*a[1]+a[2]+a[3];
        cmb[j++]= a[0]*a[1]+a[2]-a[3]; 
        cmb[j++]= a[0]*a[1]+a[2]*a[3];
        cmb[j++]= a[0]*a[1]+a[2]/a[3];
        cmb[j++]= a[0]*a[1]-a[2]+a[3];
        cmb[j++]= a[0]*a[1]-a[2]-a[3]; 
        cmb[j++]= a[0]*a[1]-a[2]*a[3];
        cmb[j++]= a[0]*a[1]-a[2]/a[3];
        cmb[j++]= a[0]*a[1]*a[2]+a[3];
        cmb[j++]= a[0]*a[1]*a[2]-a[3]; 
        cmb[j++]= a[0]*a[1]*a[2]*a[3];
        cmb[j++]= a[0]*a[1]*a[2]/a[3];
        cmb[j++]= a[0]*a[1]/a[2]+a[3];
        cmb[j++]= a[0]*a[1]/a[2]-a[3]; 
        cmb[j++]= a[0]*a[1]/a[2]*a[3];
        cmb[j++]= a[0]*a[1]/a[2]/a[3];
        
        cmb[j++]= a[0]/a[1]+a[2]+a[3];
        cmb[j++]= a[0]/a[1]+a[2]-a[3]; 
        cmb[j++]= a[0]/a[1]+a[2]*a[3];
        cmb[j++]= a[0]/a[1]+a[2]/a[3];
        cmb[j++]= a[0]/a[1]-a[2]+a[3];
        cmb[j++]= a[0]/a[1]-a[2]-a[3]; 
        cmb[j++]= a[0]/a[1]-a[2]*a[3];
        cmb[j++]= a[0]/a[1]-a[2]/a[3];
        cmb[j++]= a[0]/a[1]*a[2]+a[3];
        cmb[j++]= a[0]/a[1]*a[2]-a[3]; 
        cmb[j++]= a[0]/a[1]*a[2]*a[3];
        cmb[j++]= a[0]/a[1]*a[2]/a[3];
        cmb[j++]= a[0]/a[1]/a[2]+a[3];
        cmb[j++]= a[0]/a[1]/a[2]-a[3]; 
        cmb[j++]= a[0]/a[1]/a[2]*a[3];
        cmb[j++]= a[0]/a[1]/a[2]/a[3];
    
    
    // b-combination a[0]_a[1]_(a[2]_a[3])
        cmb[j++]= a[0]+a[1]+(a[2]+a[3]);
        cmb[j++]= a[0]+a[1]+(a[2]-a[3]); 
        cmb[j++]= a[0]+a[1]+(a[2]*a[3]);
        cmb[j++]= a[0]+a[1]+(a[2]/a[3]);
        cmb[j++]= a[0]+a[1]-(a[2]+a[3]);
        cmb[j++]= a[0]+a[1]-(a[2]-a[3]); 
        cmb[j++]= a[0]+a[1]-(a[2]*a[3]);
        cmb[j++]= a[0]+a[1]-(a[2]/a[3]);
        cmb[j++]= a[0]+a[1]*(a[2]+a[3]);
        cmb[j++]= a[0]+a[1]*(a[2]-a[3]); 
        cmb[j++]= a[0]+a[1]*(a[2]*a[3]);
        cmb[j++]= a[0]+a[1]*(a[2]/a[3]);
        cmb[j++]= a[0]+a[1]/(a[2]+a[3]);
        cmb[j++]= a[0]+a[1]/(a[2]-a[3]); 
        cmb[j++]= a[0]+a[1]/(a[2]*a[3]);
        cmb[j++]= a[0]+a[1]/(a[2]/a[3]);
    
        cmb[j++]= a[0]-a[1]+(a[2]+a[3]);
        cmb[j++]= a[0]-a[1]+(a[2]-a[3]); 
        cmb[j++]= a[0]-a[1]+(a[2]*a[3]);
        cmb[j++]= a[0]-a[1]+(a[2]/a[3]);
        cmb[j++]= a[0]-a[1]-(a[2]+a[3]);
        cmb[j++]= a[0]-a[1]-(a[2]-a[3]); 
        cmb[j++]= a[0]-a[1]-(a[2]*a[3]);
        cmb[j++]= a[0]-a[1]-(a[2]/a[3]);
        cmb[j++]= a[0]-a[1]*(a[2]+a[3]);
        cmb[j++]= a[0]-a[1]*(a[2]-a[3]); 
        cmb[j++]= a[0]-a[1]*(a[2]*a[3]);
        cmb[j++]= a[0]-a[1]*(a[2]/a[3]);
        cmb[j++]= a[0]-a[1]/(a[2]+a[3]);
        cmb[j++]= a[0]-a[1]/(a[2]-a[3]); 
        cmb[j++]= a[0]-a[1]/(a[2]*a[3]);
        cmb[j++]= a[0]-a[1]/(a[2]/a[3]);
    
        cmb[j++]= a[0]*a[1]+(a[2]+a[3]);
        cmb[j++]= a[0]*a[1]+(a[2]-a[3]); 
        cmb[j++]= a[0]*a[1]+(a[2]*a[3]);
        cmb[j++]= a[0]*a[1]+(a[2]/a[3]);
        cmb[j++]= a[0]*a[1]-(a[2]+a[3]);
        cmb[j++]= a[0]*a[1]-(a[2]-a[3]); 
        cmb[j++]= a[0]*a[1]-(a[2]*a[3]);
        cmb[j++]= a[0]*a[1]-(a[2]/a[3]);
        cmb[j++]= a[0]*a[1]*(a[2]+a[3]);
        cmb[j++]= a[0]*a[1]*(a[2]-a[3]); 
        cmb[j++]= a[0]*a[1]*(a[2]*a[3]);
        cmb[j++]= a[0]*a[1]*(a[2]/a[3]);
        cmb[j++]= a[0]*a[1]/(a[2]+a[3]);
        cmb[j++]= a[0]*a[1]/(a[2]-a[3]); 
        cmb[j++]= a[0]*a[1]/(a[2]*a[3]);
        cmb[j++]= a[0]*a[1]/(a[2]/a[3]);
    
        cmb[j++]= a[0]/a[1]+(a[2]+a[3]);
        cmb[j++]= a[0]/a[1]+(a[2]-a[3]); 
        cmb[j++]= a[0]/a[1]+(a[2]*a[3]);
        cmb[j++]= a[0]/a[1]+(a[2]/a[3]);
        cmb[j++]= a[0]/a[1]-(a[2]+a[3]);
        cmb[j++]= a[0]/a[1]-(a[2]-a[3]); 
        cmb[j++]= a[0]/a[1]-(a[2]*a[3]);
        cmb[j++]= a[0]/a[1]-(a[2]/a[3]);
        cmb[j++]= a[0]/a[1]*(a[2]+a[3]);
        cmb[j++]= a[0]/a[1]*(a[2]-a[3]); 
        cmb[j++]= a[0]/a[1]*(a[2]*a[3]);
        cmb[j++]= a[0]/a[1]*(a[2]/a[3]);
        cmb[j++]= a[0]/a[1]/(a[2]+a[3]);
        cmb[j++]= a[0]/a[1]/(a[2]-a[3]); 
        cmb[j++]= a[0]/a[1]/(a[2]*a[3]);
        cmb[j++]= a[0]/a[1]/(a[2]/a[3]);
    
    
    // c-combination (a[0]_a[1])_(a[2]_a[3])
        cmb[j++]= (a[0]+a[1])+(a[2]+a[3]);
        cmb[j++]= (a[0]+a[1])+(a[2]-a[3]); 
        cmb[j++]= (a[0]+a[1])+(a[2]*a[3]);
        cmb[j++]= (a[0]+a[1])+(a[2]/a[3]);
        cmb[j++]= (a[0]+a[1])-(a[2]+a[3]);
        cmb[j++]= (a[0]+a[1])-(a[2]-a[3]); 
        cmb[j++]= (a[0]+a[1])-(a[2]*a[3]);
        cmb[j++]= (a[0]+a[1])-(a[2]/a[3]);
        cmb[j++]= (a[0]+a[1])*(a[2]+a[3]);
        cmb[j++]= (a[0]+a[1])*(a[2]-a[3]); 
        cmb[j++]= (a[0]+a[1])*(a[2]*a[3]);
        cmb[j++]= (a[0]+a[1])*(a[2]/a[3]);
        cmb[j++]= (a[0]+a[1])/(a[2]+a[3]);
        cmb[j++]= (a[0]+a[1])/(a[2]-a[3]); 
        cmb[j++]= (a[0]+a[1])/(a[2]*a[3]);
        cmb[j++]= (a[0]+a[1])/(a[2]/a[3]);
    
        cmb[j++]= (a[0]-a[1])+(a[2]+a[3]);
        cmb[j++]= (a[0]-a[1])+(a[2]-a[3]); 
        cmb[j++]= (a[0]-a[1])+(a[2]*a[3]);
        cmb[j++]= (a[0]-a[1])+(a[2]/a[3]);
        cmb[j++]= (a[0]-a[1])-(a[2]+a[3]);
        cmb[j++]= (a[0]-a[1])-(a[2]-a[3]); 
        cmb[j++]= (a[0]-a[1])-(a[2]*a[3]);
        cmb[j++]= (a[0]-a[1])-(a[2]/a[3]);
        cmb[j++]= (a[0]-a[1])*(a[2]+a[3]);
        cmb[j++]= (a[0]-a[1])*(a[2]-a[3]); 
        cmb[j++]= (a[0]-a[1])*(a[2]*a[3]);
        cmb[j++]= (a[0]-a[1])*(a[2]/a[3]);
        cmb[j++]= (a[0]-a[1])/(a[2]+a[3]);
        cmb[j++]= (a[0]-a[1])/(a[2]-a[3]); 
        cmb[j++]= (a[0]-a[1])/(a[2]*a[3]);
        cmb[j++]= (a[0]-a[1])/(a[2]/a[3]);
    
        cmb[j++]= (a[0]*a[1])+(a[2]+a[3]);
        cmb[j++]= (a[0]*a[1])+(a[2]-a[3]); 
        cmb[j++]= (a[0]*a[1])+(a[2]*a[3]);
        cmb[j++]= (a[0]*a[1])+(a[2]/a[3]);
        cmb[j++]= (a[0]*a[1])-(a[2]+a[3]);
        cmb[j++]= (a[0]*a[1])-(a[2]-a[3]); 
        cmb[j++]= (a[0]*a[1])-(a[2]*a[3]);
        cmb[j++]= (a[0]*a[1])-(a[2]/a[3]);
        cmb[j++]= (a[0]*a[1])*(a[2]+a[3]);
        cmb[j++]= (a[0]*a[1])*(a[2]-a[3]); 
        cmb[j++]= (a[0]*a[1])*(a[2]*a[3]);
        cmb[j++]= (a[0]*a[1])*(a[2]/a[3]);
        cmb[j++]= (a[0]*a[1])/(a[2]+a[3]);
        cmb[j++]= (a[0]*a[1])/(a[2]-a[3]); 
        cmb[j++]= (a[0]*a[1])/(a[2]*a[3]);
        cmb[j++]= (a[0]*a[1])/(a[2]/a[3]);
    
        cmb[j++]= (a[0]/a[1])+(a[2]+a[3]);
        cmb[j++]= (a[0]/a[1])+(a[2]-a[3]); 
        cmb[j++]= (a[0]/a[1])+(a[2]*a[3]);
        cmb[j++]= (a[0]/a[1])+(a[2]/a[3]);
        cmb[j++]= (a[0]/a[1])-(a[2]+a[3]);
        cmb[j++]= (a[0]/a[1])-(a[2]-a[3]); 
        cmb[j++]= (a[0]/a[1])-(a[2]*a[3]);
        cmb[j++]= (a[0]/a[1])-(a[2]/a[3]);
        cmb[j++]= (a[0]/a[1])*(a[2]+a[3]);
        cmb[j++]= (a[0]/a[1])*(a[2]-a[3]); 
        cmb[j++]= (a[0]/a[1])*(a[2]*a[3]);
        cmb[j++]= (a[0]/a[1])*(a[2]/a[3]);
        cmb[j++]= (a[0]/a[1])/(a[2]+a[3]);
        cmb[j++]= (a[0]/a[1])/(a[2]-a[3]); 
        cmb[j++]= (a[0]/a[1])/(a[2]*a[3]);
        cmb[j++]= (a[0]/a[1])/(a[2]/a[3]);
    
    
    // d-combination a[0]_(a[1]_a[2]_a[3])
        cmb[j++]= a[0]+(a[1]+a[2]+a[3]);
        cmb[j++]= a[0]+(a[1]+a[2]-a[3]); 
        cmb[j++]= a[0]+(a[1]+a[2]*a[3]);
        cmb[j++]= a[0]+(a[1]+a[2]/a[3]);
        cmb[j++]= a[0]+(a[1]-a[2]+a[3]);
        cmb[j++]= a[0]+(a[1]-a[2]-a[3]); 
        cmb[j++]= a[0]+(a[1]-a[2]*a[3]);
        cmb[j++]= a[0]+(a[1]-a[2]/a[3]);
        cmb[j++]= a[0]+(a[1]*a[2]+a[3]);
        cmb[j++]= a[0]+(a[1]*a[2]-a[3]); 
        cmb[j++]= a[0]+(a[1]*a[2]*a[3]);
        cmb[j++]= a[0]+(a[1]*a[2]/a[3]);
        cmb[j++]= a[0]+(a[1]/a[2]+a[3]);
        cmb[j++]= a[0]+(a[1]/a[2]-a[3]); 
        cmb[j++]= a[0]+(a[1]/a[2]*a[3]);
        cmb[j++]= a[0]+(a[1]/a[2]/a[3]);
   
        cmb[j++]= a[0]-(a[1]+a[2]+a[3]);
        cmb[j++]= a[0]-(a[1]+a[2]-a[3]); 
        cmb[j++]= a[0]-(a[1]+a[2]*a[3]);
        cmb[j++]= a[0]-(a[1]+a[2]/a[3]);
        cmb[j++]= a[0]-(a[1]-a[2]+a[3]);
        cmb[j++]= a[0]-(a[1]-a[2]-a[3]); 
        cmb[j++]= a[0]-(a[1]-a[2]*a[3]);
        cmb[j++]= a[0]-(a[1]-a[2]/a[3]);
        cmb[j++]= a[0]-(a[1]*a[2]+a[3]);
        cmb[j++]= a[0]-(a[1]*a[2]-a[3]);
        cmb[j++]= a[0]-(a[1]*a[2]*a[3]); 
        cmb[j++]= a[0]-(a[1]*a[2]/a[3]);
        cmb[j++]= a[0]-(a[1]/a[2]+a[3]);
        cmb[j++]= a[0]-(a[1]/a[2]-a[3]); 
        cmb[j++]= a[0]-(a[1]/a[2]*a[3]);
        cmb[j++]= a[0]-(a[1]/a[2]/a[3]); 
   
        cmb[j++]= a[0]*(a[1]+a[2]+a[3]);
        cmb[j++]= a[0]*(a[1]+a[2]-a[3]); 
        cmb[j++]= a[0]*(a[1]+a[2]*a[3]);
        cmb[j++]= a[0]*(a[1]+a[2]/a[3]);
        cmb[j++]= a[0]*(a[1]-a[2]+a[3]);
        cmb[j++]= a[0]*(a[1]-a[2]-a[3]); 
        cmb[j++]= a[0]*(a[1]-a[2]*a[3]);
        cmb[j++]= a[0]*(a[1]-a[2]/a[3]);
        cmb[j++]= a[0]*(a[1]*a[2]+a[3]);
        cmb[j++]= a[0]*(a[1]*a[2]-a[3]); 
        cmb[j++]= a[0]*(a[1]*a[2]*a[3]);
        cmb[j++]= a[0]*(a[1]*a[2]/a[3]);
        cmb[j++]= a[0]*(a[1]/a[2]+a[3]);
        cmb[j++]= a[0]*(a[1]/a[2]-a[3]); 
        cmb[j++]= a[0]*(a[1]/a[2]*a[3]);
        cmb[j++]= a[0]*(a[1]/a[2]/a[3]);
    
        cmb[j++]= a[0]/(a[1]+a[2]+a[3]);
        cmb[j++]= a[0]/(a[1]+a[2]-a[3]); 
        cmb[j++]= a[0]/(a[1]+a[2]*a[3]);
        cmb[j++]= a[0]/(a[1]+a[2]/a[3]);
        cmb[j++]= a[0]/(a[1]-a[2]+a[3]);
        cmb[j++]= a[0]/(a[1]-a[2]-a[3]); 
        cmb[j++]= a[0]/(a[1]-a[2]*a[3]);
        cmb[j++]= a[0]/(a[1]-a[2]/a[3]);
        cmb[j++]= a[0]/(a[1]*a[2]+a[3]);
        cmb[j++]= a[0]/(a[1]*a[2]-a[3]); 
        cmb[j++]= a[0]/(a[1]*a[2]*a[3]);
        cmb[j++]= a[0]/(a[1]*a[2]/a[3]);
        cmb[j++]= a[0]/(a[1]/a[2]+a[3]);
        cmb[j++]= a[0]/(a[1]/a[2]-a[3]); 
        cmb[j++]= a[0]/(a[1]/a[2]*a[3]);
        cmb[j++]= a[0]/(a[1]/a[2]/a[3]);
    
    
    // e-combination a[0]_(a[1]_(a[2]_a[3]))
        cmb[j++]= a[0]+(a[1]+(a[2]+a[3]));
        cmb[j++]= a[0]+(a[1]+(a[2]-a[3])); 
        cmb[j++]= a[0]+(a[1]+(a[2]*a[3]));
        cmb[j++]= a[0]+(a[1]+(a[2]/a[3]));
        cmb[j++]= a[0]+(a[1]-(a[2]+a[3]));
        cmb[j++]= a[0]+(a[1]-(a[2]-a[3])); 
        cmb[j++]= a[0]+(a[1]-(a[2]*a[3]));
        cmb[j++]= a[0]+(a[1]-(a[2]/a[3]));
        cmb[j++]= a[0]+(a[1]*(a[2]+a[3]));
        cmb[j++]= a[0]+(a[1]*(a[2]-a[3])); 
        cmb[j++]= a[0]+(a[1]*(a[2]*a[3]));
        cmb[j++]= a[0]+(a[1]*(a[2]/a[3]));
        cmb[j++]= a[0]+(a[1]/(a[2]+a[3]));
        cmb[j++]= a[0]+(a[1]/(a[2]-a[3])); 
        cmb[j++]= a[0]+(a[1]/(a[2]*a[3]));
        cmb[j++]= a[0]+(a[1]/(a[2]/a[3]));
   
        cmb[j++]= a[0]-(a[1]+(a[2]+a[3]));
        cmb[j++]= a[0]-(a[1]+(a[2]-a[3])); 
        cmb[j++]= a[0]-(a[1]+(a[2]*a[3]));
        cmb[j++]= a[0]-(a[1]+(a[2]/a[3]));
        cmb[j++]= a[0]-(a[1]-(a[2]+a[3]));
        cmb[j++]= a[0]-(a[1]-(a[2]-a[3])); 
        cmb[j++]= a[0]-(a[1]-(a[2]*a[3]));
        cmb[j++]= a[0]-(a[1]-(a[2]/a[3]));
        cmb[j++]= a[0]-(a[1]*(a[2]+a[3]));
        cmb[j++]= a[0]-(a[1]*(a[2]-a[3]));
        cmb[j++]= a[0]-(a[1]*(a[2]*a[3])); 
        cmb[j++]= a[0]-(a[1]*(a[2]/a[3]));
        cmb[j++]= a[0]-(a[1]/(a[2]+a[3]));
        cmb[j++]= a[0]-(a[1]/(a[2]-a[3])); 
        cmb[j++]= a[0]-(a[1]/(a[2]*a[3]));
        cmb[j++]= a[0]-(a[1]/(a[2]/a[3])); 
   
        cmb[j++]= a[0]*(a[1]+(a[2]+a[3]));
        cmb[j++]= a[0]*(a[1]+(a[2]-a[3])); 
        cmb[j++]= a[0]*(a[1]+(a[2]*a[3]));
        cmb[j++]= a[0]*(a[1]+(a[2]/a[3]));
        cmb[j++]= a[0]*(a[1]-(a[2]+a[3]));
        cmb[j++]= a[0]*(a[1]-(a[2]-a[3])); 
        cmb[j++]= a[0]*(a[1]-(a[2]*a[3]));
        cmb[j++]= a[0]*(a[1]-(a[2]/a[3]));
        cmb[j++]= a[0]*(a[1]*(a[2]+a[3]));
        cmb[j++]= a[0]*(a[1]*(a[2]-a[3])); 
        cmb[j++]= a[0]*(a[1]*(a[2]*a[3]));
        cmb[j++]= a[0]*(a[1]*(a[2]/a[3]));
        cmb[j++]= a[0]*(a[1]/(a[2]+a[3]));
        cmb[j++]= a[0]*(a[1]/(a[2]-a[3])); 
        cmb[j++]= a[0]*(a[1]/(a[2]*a[3]));
        cmb[j++]= a[0]*(a[1]/(a[2]/a[3]));
    
        cmb[j++]= a[0]/(a[1]+(a[2]+a[3]));
        cmb[j++]= a[0]/(a[1]+(a[2]-a[3])); 
        cmb[j++]= a[0]/(a[1]+(a[2]*a[3]));
        cmb[j++]= a[0]/(a[1]+(a[2]/a[3]));
        cmb[j++]= a[0]/(a[1]-(a[2]+a[3]));
        cmb[j++]= a[0]/(a[1]-(a[2]-a[3])); 
        cmb[j++]= a[0]/(a[1]-(a[2]*a[3]));
        cmb[j++]= a[0]/(a[1]-(a[2]/a[3]));
        cmb[j++]= a[0]/(a[1]*(a[2]+a[3]));
        cmb[j++]= a[0]/(a[1]*(a[2]-a[3])); 
        cmb[j++]= a[0]/(a[1]*(a[2]*a[3]));
        cmb[j++]= a[0]/(a[1]*(a[2]/a[3]));
        cmb[j++]= a[0]/(a[1]/(a[2]+a[3]));
        cmb[j++]= a[0]/(a[1]/(a[2]-a[3])); 
        cmb[j++]= a[0]/(a[1]/(a[2]*a[3]));
        cmb[j++]= a[0]/(a[1]/(a[2]/a[3]));
            
        for (int i = 0; i < cmb.length; i++){
            v = i;
            if (Math.round(cmb[i])==24) {
                b = true;
                //System.out.println("cmb["+i+"]" + b);
                break;
            }    
        }
    return b;
    } 
}
