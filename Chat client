package chatclient;

import java.io.*;
import java.net.*;
import java.util.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class ChatClient {
    JTextArea incoming;    
    JTextField outgoing;
    JTextField setname;
    BufferedReader reader;
    PrintWriter writer;
    Socket sock;
    String name = "anonymous user";
    JFrame name_frame;
    int users;
    
    
    public static void main(String[] args) {
               
        ChatClient client = new ChatClient();
        client.start();          
    }
    
    public void start(){
        name_frame = new JFrame ("Set your name please");
        JPanel mainPanel = new JPanel();                
        setname = new JTextField(20);
        JButton nameButton = new JButton("Set Name");
        nameButton.addActionListener(new NameButtonListener());        
        mainPanel.add(setname);
        mainPanel.add(nameButton);                
        name_frame.getContentPane().add(BorderLayout.CENTER, mainPanel);
        name_frame.setSize(400,100);
        name_frame.setVisible(true);
        name_frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        
    }
    
    
    
        
    public void go() {
        JFrame frame = new JFrame ("Chat");
        JPanel mainPanel = new JPanel();
        JLabel label = new JLabel("You chat-name: " + name);
        JLabel label2 = new JLabel("Users ONLINE: ");
        incoming = new JTextArea(20,50);
        incoming.setLineWrap(true);
        incoming.setWrapStyleWord(true);
        incoming.setEditable(false);
        JScrollPane qScroller = new JScrollPane(incoming);
        qScroller.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        qScroller.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        outgoing = new JTextField(20);
        JButton sendButton = new JButton("Send");
        sendButton.addActionListener(new SendButtonListener());
        mainPanel.add(qScroller);
        mainPanel.add(outgoing);
        mainPanel.add(sendButton);
        setUpNetworking();
        
        Thread readerThread = new Thread(new IncomingReader());
        readerThread.start();
        
        frame.getContentPane().add(BorderLayout.CENTER, mainPanel);
        frame.getContentPane().add(BorderLayout.NORTH, label);
        frame.getContentPane().add(BorderLayout.SOUTH, label2);
        frame.setSize(600,500);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    
    private void setUpNetworking(){
        try {
            sock = new Socket("localhost", 3345);
            InputStreamReader streamReader = new InputStreamReader(sock.getInputStream());
            reader = new BufferedReader(streamReader);
            writer = new PrintWriter(sock.getOutputStream());
            writer.println("User " + name + " is online" + "\n");
            writer.flush();
            System.out.println("networking established ");
        } catch(IOException ex) {ex.printStackTrace();
        
        }    
    
    }
    
  public class SendButtonListener implements ActionListener {
      Date date = new Date();
      public void actionPerformed(ActionEvent ev) {
          try {
              writer.println(date  + "\n" + name + " said:" + "\n" + "    " + outgoing.getText() + "\n");
              writer.flush();
          } catch(Exception ex) {
              ex.printStackTrace();
          }
          outgoing.setText("");
          outgoing.requestFocus();
      } 
  } //  class SendButtonListener
  
  public class NameButtonListener implements ActionListener {
      
      public void actionPerformed(ActionEvent ev) { 
          
           name = setname.getText();
                 
                      
           name_frame.dispose();
           go();  
          
      } 
  } //  class NameButtonListener
  
  
  
  public class IncomingReader implements Runnable {
      public void run() {
          String message;
          try {
          
              while ((message = reader.readLine()) != null) {
              System.out.println(message);
              incoming.append(message + "\n");
              } //while
          } catch (Exception ex) {ex.printStackTrace();}
      } //run
  } //  class IncomingReader
    
} //  class ChatClient
